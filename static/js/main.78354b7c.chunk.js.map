{"version":3,"sources":["components/calculator.module.css","components/display.module.css","components/display.js","components/buttons.js","components/validationInput.js","components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","id","styles","display","total","buttons","add","onClick","e","numberClicked","subtract","multiply","divide","seven","eight","nine","four","five","six","one","two","three","zero","decimal","clear","equals","validationInput","currDisp","userInput","target","textContent","toString","includes","charAt","length","Calculator","state","sums","updateDisplay","input","setState","prevState","buttonClicked","validInput","updateSums","clearDisplay","getTotal","persist","resetDisplay","finalCalculation","finalCalc","sumArray","sumArrayCalc","splice","number1","Number","number2","operator","unshift","this","results","toFixed","className","calculator","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78354b7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"calculator\":\"calculator_calculator__22tE0\",\"equals\":\"calculator_equals__818nz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"display_display__3HkFF\"};","import React from 'react';\nimport styles from './display.module.css';\n\nexport default function Display(props) {\n  return (\n    <div id={styles.display}>\n      <span>{props.total}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport styles from './calculator.module.css';\nexport default function buttons(props) {\n  return (\n    <>\n      <button id={styles.add} onClick={(e) => props.numberClicked(e)}>\n        +\n      </button>\n      <button id={styles.subtract} onClick={(e) => props.numberClicked(e)}>\n        -\n      </button>\n      <button id={styles.multiply} onClick={(e) => props.numberClicked(e)}>\n        x\n      </button>\n      <button id={styles.divide} onClick={(e) => props.numberClicked(e)}>\n        /\n      </button>\n      <button id={styles.seven} onClick={(e) => props.numberClicked(e)}>\n        7\n      </button>\n      <button id={styles.eight} onClick={(e) => props.numberClicked(e)}>\n        8\n      </button>\n      <button id={styles.nine} onClick={(e) => props.numberClicked(e)}>\n        9\n      </button>\n      <button id={styles.four} onClick={(e) => props.numberClicked(e)}>\n        4\n      </button>\n      <button id={styles.five} onClick={(e) => props.numberClicked(e)}>\n        5\n      </button>\n      <button id={styles.six} onClick={(e) => props.numberClicked(e)}>\n        6\n      </button>\n      <button id={styles.one} onClick={(e) => props.numberClicked(e)}>\n        1\n      </button>\n      <button id={styles.two} onClick={(e) => props.numberClicked(e)}>\n        2\n      </button>\n      <button id={styles.three} onClick={(e) => props.numberClicked(e)}>\n        3\n      </button>\n      <button id={styles.zero} onClick={(e) => props.numberClicked(e)}>\n        0\n      </button>\n      <button id={styles.decimal} onClick={(e) => props.numberClicked(e)}>\n        .\n      </button>\n      <button id={styles.clear} onClick={(e) => props.numberClicked(e)}>\n        ac\n      </button>\n      <button id={styles.equals} onClick={(e) => props.numberClicked(e)}>\n        =\n      </button>\n    </>\n  );\n}\n","export default function validationInput(e, currDisp) {\n  let userInput = e.target.textContent;\n  if (userInput === 'ac') {\n    return true;\n  }\n  currDisp = currDisp.toString();\n  // this will stop the user being able to type in more than one decimal\n\n  if (currDisp.includes('.') && userInput === '.') {\n    return false;\n  }\n\n  // this will check if and stop a user starting a calculation with one of the below operators, - is left out as they can use - numbers in their calculations.\n\n  if (currDisp === '0' && ['+', 'x', '/', '='].includes(userInput)) {\n    return false;\n  }\n\n  // This stops the user typing to the same operator twice\n  if (\n    ['+', 'x', '/', '='].includes(currDisp.charAt(currDisp.length - 1)) &&\n    ['+', 'x', '/', '='].includes(userInput)\n  ) {\n    return false;\n  } else {\n    return true;\n  }\n}\n","import React, { Component } from \"react\";\nimport Display from \"./display\";\nimport styles from \"./calculator.module.css\";\nimport Buttons from \"./buttons\";\nimport validInput from \"./validationInput\";\n\nexport default class Calculator extends Component {\n  state = {\n    sums: [],\n    total: \"0\",\n    display: \"0\",\n  };\n\n  updateSums(userInput) {\n    this.setState((prevState) => {\n      if (prevState.sums.length === 1) {\n        return {\n          ...prevState,\n          display: userInput,\n        };\n      } else {\n        return { sums: [...prevState.sums, prevState.display, userInput] };\n      }\n    });\n  }\n\n  clearDisplay() {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        display: \"\",\n      };\n    });\n  }\n\n  getTotal() {\n    this.setState((prevState) => {\n      //he here i get the prevState and pass it to the final calculation function\n      let results = this.finalCalculation(prevState.sums);\n      results = results.toString().includes(\".\")\n        ? results.toFixed(2)\n        : results.toString();\n\n      return {\n        ...prevState,\n        total: results,\n        sums: [results],\n        display: results,\n      };\n    });\n  }\n\n  resetDisplay() {\n    this.setState({\n      total: \"0\",\n      display: \"0\",\n      sums: [],\n    });\n  }\n\n  updateDisplay = (input) => {\n    this.setState((prevState) => {\n      if (prevState.total !== \"0\") {\n        return {\n          ...prevState,\n          sums: [prevState.total, input],\n          display: input,\n        };\n      }\n\n      return {\n        ...prevState,\n        display: prevState.display + input,\n      };\n    });\n  };\n\n  buttonClicked = (e) => {\n    if (!validInput(e, this.state.display)) {\n      return;\n    }\n    let userInput = e.target.textContent;\n    switch (userInput) {\n      case \"=\":\n        if (this.state.sums.length > 1) {\n          this.updateSums(\"=\");\n          this.clearDisplay();\n          this.getTotal();\n          return;\n        }\n        return;\n\n      case \".\":\n        e.persist();\n        return this.setState((prevState) => {\n          if (\n            prevState.sums.length > 1 &&\n            [\"x\", \"/\", \"+\"].includes(prevState.display) === true\n          ) {\n            return {\n              display: e.target.textContent,\n            };\n          } else {\n            return {\n              display: prevState.display + e.target.textContent,\n            };\n          }\n        });\n\n      case \"ac\":\n        return this.resetDisplay();\n\n      case \"+\":\n        this.updateSums(\"+\");\n        this.clearDisplay();\n        return this.updateDisplay(\"+\");\n\n      case \"-\":\n        // This is check if an operator io already in the array and if so then it will clear this operator and return the - into the display, if not it will add the number to the calculation\n        e.persist();\n        return this.setState((prevState) => {\n          if ([\"+\", \"x\", \"/\"].includes(prevState.display)) {\n            this.clearDisplay();\n            this.updateDisplay(\"-\");\n          } else {\n            return {\n              ...prevState,\n              sums: [...prevState.sums, prevState.display, userInput],\n              display: e.target.textContent,\n            };\n          }\n        });\n\n      case \"x\":\n        this.updateSums(\"x\");\n        this.clearDisplay();\n        return this.updateDisplay(\"x\");\n\n      case \"/\":\n        this.updateSums(\"/\");\n        this.clearDisplay();\n        return this.updateDisplay(\"/\");\n\n      default:\n        // as I need to use the event within the callback I need to use e.persist so I can use it in there.\n        e.persist();\n        return this.setState((prevState) => {\n          if (\n            ([\"-\"].includes(prevState.display) &&\n              [\"/\", \"x\", \"+\"].includes(\n                prevState.sums[prevState.sums.length - 1]\n              )) ||\n            [\"/\", \"x\", \"+\", \"-\", \"0\"].includes(prevState.display) === false\n          ) {\n            return { display: prevState.display + e.target.textContent };\n          } else {\n            return { display: e.target.textContent };\n          }\n        });\n    }\n  };\n\n  // Here a final calculation is worked out and returned to be displayed.\n\n  finalCalculation = (sums) => {\n    // My calculator will allow any number of calculations before you press =, this is done by putting all the numbers in an array and working through them one at a time, splice off each calculation and then adding it back to the  array. if the array is less than 3 there is no more calculations to be done.\n    let finalCalc = 0;\n    let sumArray = [...sums];\n    this.setState({ sums: sums });\n\n    while (sumArray.length > 3) {\n      const sumArrayCalc = sumArray.splice(0, 3);\n      const number1 = Number(sumArrayCalc[0]);\n      const number2 = Number(sumArrayCalc[2]);\n      const operator = sumArrayCalc[1];\n\n      if (operator === \"x\") {\n        finalCalc = number1;\n        finalCalc = finalCalc * number2;\n      }\n\n      if (operator === \"+\") {\n        finalCalc = number1;\n        finalCalc = finalCalc + number2;\n      }\n\n      if (operator === \"-\") {\n        finalCalc = number1;\n        finalCalc = finalCalc - number2;\n      }\n\n      if (operator === \"/\") {\n        finalCalc = number1;\n        finalCalc = finalCalc / number2;\n      }\n      sumArray.unshift(finalCalc);\n    }\n\n    return finalCalc;\n  };\n\n  render() {\n    return (\n      <div className={styles.calculator}>\n        <Display total={this.state.display} />\n\n        <Buttons numberClicked={this.buttonClicked} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}